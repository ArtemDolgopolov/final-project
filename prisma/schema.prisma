generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean   @default(true)
  image         String?
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  forms          Form[]    // Связь с созданными пользователем шаблонами
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Form { // Модель для шаблонов форм
  id           String     @id @default(cuid()) @map("_id")
  title        String     // Название шаблона
  description  String?    // Описание шаблона
  image        String?    // Ссылка на изображение
  theme        String     // Тема шаблона
  visibility   String     // Доступность (публичный/ограниченный доступ)
  userId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions    Question[] // Связь с вопросами шаблона
  formTags     FormTag[]  // Связь с промежуточной моделью для тегов
}

model Question { // Модель для вопросов
  id           String    @id @default(cuid()) @map("_id")
  text         String    // Текст вопроса
  questionType String    // Тип вопроса (например, выбор из списка, текст и т. д.)
  formId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  form         Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model Tag { // Модель для тегов
  id           String     @id @default(cuid()) @map("_id")
  name         String     // Название тега
  formTags     FormTag[]  // Связь с промежуточной моделью для форм
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model FormTag { // Промежуточная модель для связи между Form и Tag
  id      String   @id @default(cuid()) @map("_id") // Уникальный идентификатор
  formId  String
  tagId   String
  form    Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  tag     Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([formId, tagId]) // Гарантия уникальности пары formId и tagId
}