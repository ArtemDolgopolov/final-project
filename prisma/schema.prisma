generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean   @default(true)
  image         String?
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  forms         Form[]    @relation("UserForms")
  responses     Response[] // Добавлена связь с ответами
  likes         Like[]     // Обратная связь для лайков
  comments      Comment[] 
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Form {
  id          String    @id @default(cuid()) @map("_id")
  title       String
  description String
  questions   Json
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserForms")
  responses  Response[]
  likes      Like[]
  comments   Comment[] 
}

model Response {
  id        String   @id @default(cuid()) @map("_id")
  formId    String
  userId    String
  answers   Json     // JSON-объект с ответами пользователя
  createdAt DateTime @default(now())

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        String @id @default(cuid()) @map("_id")
  formId    String
  userId    String

  formLikes Form @relation(fields: [formId], references: [id])
  userLikes User @relation(fields: [userId], references: [id])


  @@unique([formId, userId]) // Один лайк от одного пользователя
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  formId    String
  userId    String
  text      String
  createdAt DateTime @default(now())

  formComments Form @relation(fields: [formId], references: [id])
  userComments User @relation(fields: [userId], references: [id])
}